'''This code uses Garfield++ to simulate the gain inside a Triple GEM with the dimensions of that used in the GORG experiment.'''

import os
import ctypes
import ROOT
import Garfield

import numpy as np
import matplotlib.pyplot as plt


gas = ROOT.Garfield.MediumMagboltz()
gas.SetTemperature(293.15)
gas.SetPressure(740.)
#gas.SetComposition("ar", 45., "co2", 15., "cf4", 40.)
#gas.SetComposition("ar", 90., "iso", 10.)
gas.SetComposition("ar", 70., "co2", 30.)
gas.EnableDrift()
gas.Initialise(True)

rPenning = 0.57 
gas.EnablePenningTransfer(rPenning, 0., "ar")

# Load a table of ion mobilities.
# gas.LoadIonMobility(path + '/share/Garfield/Data/IonMobility_Ar+_Ar.txt')             # CERN SWAN :: Nightly-built Garfield on available on LXPLUS
gas.LoadIonMobility('/content/garfield/garfieldpp/Data/IonMobility_Ar+_Ar.txt')  # GOOGLE COLAB

# Load the field map.
fm = ROOT.Garfield.ComponentAnsys123()
# fm.Initialise("ELIST.lis", "NLIST.lis", "MPLIST.lis", "field.lis", "mm")
fm.Initialise("Triple-GEM-Example-NISER-Solutions/ELIST.lis", "Triple-GEM-Example-NISER-Solutions/NLIST.lis", "Triple-GEM-Example-NISER-Solutions/MPLIST.lis", "Triple-GEM-Example-NISER-Solutions/field.lis", "micron")
fm.EnableMirrorPeriodicityX()
fm.EnableMirrorPeriodicityY()
fm.SetGas(gas)

# Dimensions of the GEM [cm].
pitch = 0.014

fieldView = ROOT.Garfield.ViewField()
cF = ROOT.TCanvas('cF', '', 600, 600)
fieldView.SetCanvas(cF)
fieldView.SetComponent(fm)
# Set the viewing plane (xz plane).
fieldView.SetPlaneXZ()
# Set the plot limits in the current viewing plane.
fieldView.SetArea(-1, -0.3, 1, 0.3)
fieldView.SetVoltageRange(-3200., 0000.)

cF.SetLeftMargin(0.16)
fieldView.Plot("v", "colz")
cF.Update()
cF.Draw()

sensor = ROOT.Garfield.Sensor()
sensor.AddComponent(fm)
sensor.SetArea(-2, -1, -1, 2,  1, 1)

aval = ROOT.Garfield.AvalancheMicroscopic()
aval.SetSensor(sensor)

drift = ROOT.Garfield.AvalancheMC()
drift.SetSensor(sensor)
drift.SetDistanceSteps(2.e-4)

driftView = ROOT.Garfield.ViewDrift()
aval.EnablePlotting(driftView, 1)
drift.EnablePlotting(driftView)

x0 = -0.5
y0 = -0.5
z0 = -0.2
t0 = 0.
e0 = 0.1
aval.AvalancheElectron(x0, y0, z0, t0, e0, 0., 0., 0.)
#drift.AvalancheElectron(x0, y0, z0, t0, 0)
ne= ctypes.c_int()
ni= ctypes.c_int()
aval.GetAvalancheSize(ne, ni)
print(ne.value)

for electron in aval.GetElectrons():
  p0 = electron.path[0]
  #drift.DriftIon(p0.x, p0.y, p0.z, p0.t)


cD = ROOT.TCanvas('cD', '', 600, 600)
meshView = ROOT.Garfield.ViewFEMesh()
meshView.SetArea(-1, -0.3, 1, 0.3)
meshView.SetCanvas(cD)
meshView.SetComponent(fm)
# x-z projection.
meshView.SetPlane(0, -1, 0, 0, 0, 0)
meshView.SetFillMesh(True)
#  Set the color of the kapton.
meshView.SetColor(2, ROOT.kYellow + 3)
meshView.EnableAxes()
meshView.SetViewDrift(driftView)

meshView.Plot()
cD.Draw()

ne= ctypes.c_int()
ni= ctypes.c_int()
aval.GetAvalancheSize(ne, ni)
print(ne.value)

gorg_gain = ROOT.TH1F("gorg_gain","gorg_gain",100,0,1000)

#Histo gain distribution
for i in range(10):
  x0 = -0.5 * pitch + ROOT.Garfield.RndmUniform() * pitch
  y0 = -0.5 * pitch + ROOT.Garfield.RndmUniform() * pitch
  z0 = -0.2
  t0 = 0.
  e0 = 0.1
  aval.AvalancheElectron(x0, y0, z0, t0, e0, 0., 0., 0.)
  aval.GetAvalancheSize(ne, ni)
  #cout<<"avalanche "<<i<<" electrons = "<<ne.value<<endl;
  #print(ne.value)
  gorg_gain.Fill(ne.value)

cE = ROOT.TCanvas('cE', '', 600, 600)
cE.cd()
gorg_gain.Draw()
cE.Draw()

f_polya = ROOT.TF1("f_polya","([2]/[0]) * (pow(1 + [1],1 + [1]) / TMath::Gamma(1 + [1])) * pow((x/[0]),[1]) * exp(-(1 + [1]) * x / [0])", 0, 150000)
f_polya.SetParameter(0,4000)
f_polya.SetParameter(1,0.5)
f_polya.SetParameter(2,1)

gorg_gain.Fit("f_polya")

gorg_gain.Draw()
cE.Draw()
